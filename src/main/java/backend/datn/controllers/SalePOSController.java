package backend.datn.controllers;

import backend.datn.dto.ApiResponse;
import backend.datn.dto.request.OrderDetailCreateRequest;
import backend.datn.dto.request.OrderPOSCreateRequest;
import backend.datn.dto.response.OrderResponse;
import backend.datn.entities.*;
import backend.datn.mapper.OrderMapper;
import backend.datn.services.*;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/sale-pos")
public class SalePOSController {

    @Autowired
    private OrderService orderService;

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private ProductDetailService productDetailService;

    @Autowired
    private VoucherService voucherService;

    @Autowired
    private CustomerService customerService;

    @Autowired
    private SalePOSService salePOSService;

    // t·∫°o ho√° ƒë∆°n r·ªóng
//    @PostMapping("/orders")
//    public ResponseEntity<ApiResponse> createEmptyOrder(
//            @RequestParam Integer customerId,
//            @RequestParam Integer employeeId,
//            @RequestParam(required = false) Integer voucherId,
//            @RequestParam Integer paymentMethod) {
//        try {
//            // L·∫•y th√¥ng tin kh√°ch h√†ng
//            Customer customer = resolveCustomer(customerId);
//
//            // L·∫•y th√¥ng tin nh√¢n vi√™n
//            Employee employee = resolveEmployee(employeeId);
//
//            // L·∫•y th√¥ng tin voucher n·∫øu c√≥
//            Voucher voucher = (voucherId != null) ? voucherService.findById(voucherId)
//                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y voucher v·ªõi ID: " + voucherId))
//                    : null;
//
//            // T·∫°o ƒë∆°n h√†ng tr·ªëng
//            Order order = salePOSService.createEmptyOrder(customer, employee, voucher, paymentMethod);
//
//            OrderResponse orderResponse = OrderMapper.toOrderResponse(order);
//            return ResponseEntity.ok(new ApiResponse("success", "T·∫°o h√≥a ƒë∆°n m·ªõi th√†nh c√¥ng", orderResponse));
//        } catch (EntityNotFoundException e) {
//            return ResponseEntity.status(HttpStatus.NOT_FOUND)
//                    .body(new ApiResponse("error", e.getMessage(), null));
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body(new ApiResponse("error", "L·ªói khi t·∫°o h√≥a ƒë∆°n: " + e.getMessage(), null));
//        }
//    }


    @PostMapping("/orders")
    public ResponseEntity<ApiResponse> createEmptyOrder(@RequestBody OrderPOSCreateRequest request) {
        try {
//        Customer customer = resolveCustomer(request.getCustomerId());

            // üîç Log ki·ªÉm tra voucherId tr∆∞·ªõc khi x·ª≠ l√Ω
            System.out.println("üéüÔ∏è Voucher ID nh·∫≠n ƒë∆∞·ª£c: " + request.getVoucherId());

            Customer customer = (request.getCustomerId() == null ||
                    request.getCustomerId().toString().trim().isEmpty() ||
                    request.getCustomerId() == -1)
                    ? customerService.findById(-1).orElse(null)
                    : resolveCustomer(request.getCustomerId());


            Employee employee = resolveEmployee(request.getEmployeeId());
            Voucher voucher = (request.getVoucherId() != null)
                    ? voucherService.findById(request.getVoucherId()).orElse(null)
                    : null;

            // G·ªçi createEmptyOrder trong SalePOSService
            Order order = salePOSService.createEmptyOrder(customer, employee, voucher, request.getPaymentMethod());

            // üîç Ki·ªÉm tra order sau khi t·∫°o
            System.out.println("üìå ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o: " + order);
            System.out.println("üéüÔ∏è Voucher trong ƒë∆°n h√†ng: " + order.getVoucher());

            return ResponseEntity.ok(new ApiResponse("success", "T·∫°o h√≥a ƒë∆°n m·ªõi th√†nh c√¥ng", OrderMapper.toOrderResponse(order)));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse("error", "L·ªói khi t·∫°o h√≥a ƒë∆°n: " + e.getMessage(), null));
        }
    }


    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
     */
    @PostMapping("/orders/{orderId}/products")
    public ResponseEntity<OrderResponse> addProductToCart(
            @PathVariable Integer orderId,
            @RequestBody OrderDetailCreateRequest request) {
        try {
            OrderResponse response = salePOSService.addProductToCart(orderId, request);
            return ResponseEntity.ok(response);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }


    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng sau khi thanh to√°n
     */
    @PutMapping("/orders/{orderId}/payment")
    public ResponseEntity<ApiResponse> updateOrderStatusAfterPayment(@PathVariable Integer orderId) {
        try {
            // üîç Ki·ªÉm tra ƒë∆°n h√†ng tr∆∞·ªõc khi thanh to√°n
            System.out.println("üìå X√°c nh·∫≠n thanh to√°n cho ƒë∆°n h√†ng #" + orderId);

            OrderResponse response = salePOSService.updateOrderStatusAfterPayment(orderId);

            // üîç Log totalBill sau khi c·∫≠p nh·∫≠t
            System.out.println("üí∞ T·ªïng ti·ªÅn sau khi thanh to√°n: " + response.getTotalBill());

            return ResponseEntity.ok(new ApiResponse("success", "Thanh to√°n th√†nh c√¥ng", response));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse("error", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng", null));
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ thanh to√°n", null));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse("error", "L·ªói h·ªá th·ªëng: " + e.getMessage(), null));
        }
    }


    // H·ªó tr·ª£ l·∫•y th√¥ng tin kh√°ch h√†ng
    private Customer resolveCustomer(Integer customerId) {
        if (customerId != null && customerId > 0) {
            return customerService.findById(customerId)
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: " + customerId));
        }
        return customerService.getWalkInCustomer();
    }


    // H·ªó tr·ª£ l·∫•y th√¥ng tin nh√¢n vi√™n
    private Employee resolveEmployee(Integer employeeId) {
        return employeeService.findById(employeeId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi ID: " + employeeId));
    }

}

