package backend.datn.controllers;

import backend.datn.dto.ApiResponse;
import backend.datn.dto.request.OrderDetailCreateRequest;
import backend.datn.dto.request.OrderPOSCreateRequest;
import backend.datn.dto.response.CheckoutResponse;
import backend.datn.dto.response.OrderResponse;
import backend.datn.entities.*;
import backend.datn.mapper.OrderMapper;
import backend.datn.services.*;
import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/sale-pos")
public class SalePOSController {

    @Autowired
    private OrderService orderService;

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private ProductDetailService productDetailService;

    @Autowired
    private VoucherService voucherService;

    @Autowired
    private CustomerService customerService;

    @Autowired
    private SalePOSService salePOSService;

    @PostMapping("/orders")
    public ResponseEntity<ApiResponse> createEmptyOrder(@RequestBody OrderPOSCreateRequest request) {
        try {

            System.out.println("üìå [CREATE ORDER] Nh·∫≠n y√™u c·∫ßu t·∫°o ƒë∆°n h√†ng:");
            System.out.println("üë§ Kh√°ch h√†ng ID: " + request.getCustomerId());
            System.out.println("üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n: " + request.getPaymentMethod());
            System.out.println("üéü Voucher ID: " + request.getVoucherId());

            Customer customer = (request.getCustomerId() == null ||
                    request.getCustomerId().toString().trim().isEmpty() ||
                    request.getCustomerId() == -1)
                    ? customerService.findById(-1).orElse(null)
                    : resolveCustomer(request.getCustomerId());


            Employee employee = resolveEmployee(request.getEmployeeId());
            Voucher voucher = (request.getVoucherId() != null)
                    ? voucherService.findById(request.getVoucherId()).orElse(null)
                    : null;

            // G·ªçi createEmptyOrder trong SalePOSService
            Order order = salePOSService.createEmptyOrder(customer, employee, voucher, request.getPaymentMethod());

            // üîç Ki·ªÉm tra order sau khi t·∫°o
            System.out.println("‚úÖ [CREATE ORDER] ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng: " + order.getId());

            return ResponseEntity.ok(new ApiResponse("success", "T·∫°o h√≥a ƒë∆°n m·ªõi th√†nh c√¥ng", OrderMapper.toOrderResponse(order)));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse("error", "L·ªói khi t·∫°o h√≥a ƒë∆°n: " + e.getMessage(), null));
        }
    }

// QR Thanh to√°n
    @PostMapping("/payment/create-vietqr-url/{orderId}")
    public ResponseEntity<String> createVietQRPaymentUrl(@PathVariable Integer orderId) {
        try {
            String vietQrUrl = salePOSService.createVietQRPaymentUrl(orderId);
            return ResponseEntity.ok(vietQrUrl);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("L·ªói khi t·∫°o URL VietQR: " + e.getMessage());
        }
    }


    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
     */
    @PostMapping("/orders/{orderId}/products")
    public ResponseEntity<ApiResponse> addProductToCart(
            @PathVariable Integer orderId,
            @RequestBody OrderDetailCreateRequest request) {
        try {

            System.out.println("üìå [ADD PRODUCT] ƒêang th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng #" + orderId);
            System.out.println("üîç S·∫£n ph·∫©m ID: " + request.getProductDetailId() + ", SL: " + request.getQuantity());

            // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
            Order order = salePOSService.findOrderById(orderId);
            if (order == null) {
                System.err.println("‚ùå [ADD PRODUCT] Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + orderId);
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new ApiResponse("error", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng", null));
            }

            // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i v√† c√≤n h√†ng kh√¥ng
            ProductDetail productDetail = productDetailService.findById(request.getProductDetailId())
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"));

            if (productDetail.getQuantity() < request.getQuantity()) {
                System.err.println("‚ö† [ADD PRODUCT] S·∫£n ph·∫©m h·∫øt h√†ng! C√≤n l·∫°i: " + productDetail.getQuantity());
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(new ApiResponse("error", "S·∫£n ph·∫©m kh√¥ng ƒë·ªß h√†ng", null));
            }

            // Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
            OrderResponse response = salePOSService.addProductToCart(orderId, request);
            System.out.println("‚úÖ [ADD PRODUCT] ƒê√£ th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng #" + orderId);
            return ResponseEntity.ok(new ApiResponse("success", "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng", response));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }


    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng sau khi thanh to√°n
     */
    @PutMapping("/orders/{orderId}/payment")
    public ResponseEntity<ApiResponse> updateOrderStatusAfterPayment(
            @PathVariable Integer orderId,
            @RequestBody Map<String, Integer> requestBody) {
        try {
            // üîç Ki·ªÉm tra ƒë∆°n h√†ng tr∆∞·ªõc khi thanh to√°n
            Integer customerId = requestBody.get("customerId");
            Integer voucherId = requestBody.get("voucherId");
            OrderResponse response = salePOSService.updateOrderStatusAfterPayment(orderId, customerId, voucherId);

            System.out.println("üìå X√°c nh·∫≠n thanh to√°n cho ƒë∆°n h√†ng #" + orderId);

            // üîç Log totalBill sau khi c·∫≠p nh·∫≠t
            System.out.println("‚úÖ [PAYMENT] ƒê∆°n h√†ng #" + orderId + " ƒë√£ ƒë∆∞·ª£c thanh to√°n. T·ªïng ti·ªÅn: " + response.getTotalBill());

            return ResponseEntity.ok(new ApiResponse("success", "Thanh to√°n th√†nh c√¥ng", response));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse("error", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng", null));
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ thanh to√°n", null));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse("error", "L·ªói h·ªá th·ªëng: " + e.getMessage(), null));
        }
    }


    // H·ªó tr·ª£ l·∫•y th√¥ng tin kh√°ch h√†ng
    private Customer resolveCustomer(Integer customerId) {
        if (customerId != null && customerId > 0) {
            return customerService.findById(customerId)
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: " + customerId));
        }
        return customerService.getWalkInCustomer();
    }


    // H·ªó tr·ª£ l·∫•y th√¥ng tin nh√¢n vi√™n
    private Employee resolveEmployee(Integer employeeId) {
        return employeeService.findById(employeeId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi ID: " + employeeId));
    }


    @PostMapping("/checkout")
    public ResponseEntity<?> checkout(@RequestBody OrderPOSCreateRequest request) {
        try {
            System.out.println("üìå [CHECKOUT] Nh·∫≠n y√™u c·∫ßu checkout: Order ID: " + request.getOrderId());
            System.out.println("üîç Customer ID: " + request.getCustomerId());
            System.out.println("üéü Voucher ID: " + request.getVoucherId());
            System.out.println("üìã Order Details: " + request.getOrderDetails());

            Order order = salePOSService.thanhToan(request);
            return ResponseEntity.ok(new CheckoutResponse(order.getId()));
        } catch (Exception e) {
            System.err.println("‚ùå [CHECKOUT] L·ªói khi checkout: " + e.getMessage());
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    /**
     * L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
     */
    @GetMapping("/orders/{orderId}")
    public ResponseEntity<ApiResponse> getOrderById(@PathVariable Integer orderId) {
        try {
            System.out.println("üìå [GET ORDER] L·∫•y chi ti·∫øt ƒë∆°n h√†ng #" + orderId);

            // T√¨m ƒë∆°n h√†ng theo ID
            Order order = salePOSService.findOrderById(orderId);
            if (order == null) {
                System.err.println("‚ùå [GET ORDER] Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + orderId);
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new ApiResponse("error", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng", null));
            }

            // Chuy·ªÉn ƒë·ªïi Order th√†nh OrderResponse
            OrderResponse response = OrderMapper.toOrderResponse(order);
            System.out.println("‚úÖ [GET ORDER] L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng: " + order.getId());
            return ResponseEntity.ok(new ApiResponse("success", "L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng", response));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse("error", "L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng: " + e.getMessage(), null));
        }
    }

    @PutMapping("/orders/{orderId}/products/{productDetailId}")
    public ResponseEntity<ApiResponse> updateProductQuantity(
            @PathVariable Integer orderId,
            @PathVariable Integer productDetailId,
            @RequestBody Map<String, Integer> request) {
        try {
            Integer quantity = request.get("quantity");
            if (quantity == null || quantity <= 0) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(new ApiResponse("error", "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá", null));
            }

            System.out.println("üìå [UPDATE PRODUCT QUANTITY] C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m cho ƒë∆°n h√†ng #" + orderId + ", ProductDetailId: " + productDetailId + ", Quantity: " + quantity);

            OrderResponse response = salePOSService.updateProductQuantity(orderId, productDetailId, quantity);
            System.out.println("‚úÖ [UPDATE PRODUCT QUANTITY] C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng cho ƒë∆°n h√†ng #" + orderId);
            return ResponseEntity.ok(new ApiResponse("success", "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m th√†nh c√¥ng", response));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse("error", e.getMessage(), null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse("error", "L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m: " + e.getMessage(), null));
        }
    }

}

